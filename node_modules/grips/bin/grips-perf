#!/usr/bin/env node

/* grips (c) 2012-2014 Kyle Simpson | http://getify.mit-license.org/ */

function printHelp() {
	console.log("node.js performance benchmarking for grips templating engine");
	console.log("(c) 2012-2014 Kyle Simpson | http://getify.mit-license.org/");
	console.log("");
	console.log("usage: grips-perf [opt, ..opt]");
	console.log("");
	console.log("options:");
	console.log("--help                 show this help");
	console.log("");
	console.log("--nodebug              use the non-debug library");
	console.log("");
}

// NOTE: not used yet, but will be eventually
function usageError(msg) {
	console.log(msg);
	console.log("");
	printHelp();
	process.exit(1);
}

// create a grips module instance
function getGrips() {
	function sandbox() {
		// this is a hack to get a new copy of the grips module for
		// each 'compilation' test run, because `require()` caches the
		// module instance :(
		eval(FILE_CONTENTS);
	}
	return (new sandbox()).grips;
}

// setup used by the 'direct-partial' and 'render()' tests to create
// a single grips instance with the template already compiled, to be
// reused in each test run
function setupTest() {
	var setup = {};

	setup.grips = getGrips();

	setup.grips.compileCollection(template,/*collectionID=*/"grips",/*initialize=*/true);

	// render test data
	setup.data = {
		"header": "Header",
		"header2": "Header2",
		"header3": "Header3",
		"header4": "Header4",
		"header5": "Header5",
		"header6": "Header6",
		"list": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
	};

	return setup;
}

function showResults(description,opsPerSecond) {
	var opsPerMs = opsPerSecond / 1000;
	console.log(description + ": " +
		(Math.round(opsPerSecond * 100) / 100) + "[op/s]     " +
		(Math.round(opsPerMs * 100) / 100) + "[op/ms]"
	);
}


var path = require("path"),
	fs = require("fs"),
	benchmark = require("benchmark"),

	DIR_LIB = path.join(__dirname,"..","lib"),
	DIR_ROOT = path.join(__dirname,".."),

	OPT_NO_DEBUG = false,

	FILE_CONTENTS = "",
	STRIP_BUILD_TAGS = /\/\* ST(?:ART|OP)_(?:DEBUG|COMPILER) \*\//g,
	STRIP_DEBUG = /\/\* START_DEBUG[\s\S]*?STOP_DEBUG \*\//g,

	// test scenario from these perf benchmarks: http://jsperf.com/grips-performance/3
	template = "\
{$define '#main' }<div><h1 class='header'>{$insert $.header $}</h1>\
<h2 class='header2'>{$insert $.header2 $}</h2><h3 class='header3'>\
{$insert $.header3 $}</h3><h4 class='header4'>{$insert $.header4 $}\
</h4><h5 class='header5'>{$insert $.header5 $}</h5><h6 class='header6'>\
{$insert $.header6 $}</h6><ul class='list'>{$loop $.list }<li class='item'>\
{$= _.value $}</li>{$}</ul></div>{$}",

	bench1, // "compilation" test benchmark
	bench2, // "direct-partial" test benchmark
	bench3  // "render()" test benchmark
;

// process any CLI arguments
process.argv.slice(2).forEach(function(arg){
	var tmp;
	switch (arg) {
		case "--help":
			printHelp();
			process.exit(1);
			break;
		case "--nodebug":
			OPT_NO_DEBUG = true;
			break;
		default:
			break;
	}
});

// load the grips module files and combine them into a single code string
["base.js","tokenizer.js","parser.js","generator.js"].forEach(function(filename){
	FILE_CONTENTS += ";" + fs.readFileSync(path.join(DIR_LIB,filename),"utf8");
});

// build the debug or non-debug version of the code string
if (OPT_NO_DEBUG) {
	FILE_CONTENTS = FILE_CONTENTS.replace(STRIP_DEBUG,"").replace(STRIP_BUILD_TAGS,"");
}
else {
	FILE_CONTENTS = FILE_CONTENTS.replace(STRIP_BUILD_TAGS,"");
}

// "compilation" benchmark
bench1 = new benchmark.Benchmark("bench1",{
	getGrips: getGrips,
	setup: "\
		var c = this.count, setups = [], i, idx = 0;\
		for (i=0; i<c; i++) {\
			setups.push({\
				grips: this.options.getGrips()\
			});\
		}\
	",
	fn: "\
		setups[idx++].grips.compileCollection(\
			\"" + template + "\",\
			\"grips\",\
			false\
		);\
	",
	onComplete: function(){
		showResults("Compilation",bench1.hz);
	}
});

// rendering with "direct-partial" benchmark
bench2 = new benchmark.Benchmark("bench2",{
	setupTest: setupTest,
	setup: "var setup = this.options.setupTest();",
	fn: "setup.grips.collections[\"grips\"].partials[\"#main\"](setup.data);",
	onComplete: function(){
		showResults("Direct-partial",bench2.hz);
	}
});

// rendering with "render()" benchmark
bench3 = new benchmark.Benchmark("bench3",{
	setupTest: setupTest,
	setup: "var setup = this.options.setupTest();",
	fn: "setup.grips.render(\"grips#main\",setup.data);",
	onComplete: function(){
		showResults("render()",bench3.hz);
	}
});

// actually run the performance benchmarks
bench1.run();
bench2.run();
bench3.run();
